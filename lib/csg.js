export default function CSG(){this.polygons=[]}CSG.fromPolygons=function(t){var n=new CSG;return n.polygons=t,n},CSG.prototype={clone:function(){var t=new CSG;return t.polygons=this.polygons.map((function(t){return t.clone()})),t},toPolygons:function(){return this.polygons},union:function(t){var n=new CSG.Node(this.clone().polygons),o=new CSG.Node(t.clone().polygons);return n.clipTo(o),o.clipTo(n),o.invert(),o.clipTo(n),o.invert(),n.build(o.allPolygons()),CSG.fromPolygons(n.allPolygons())},subtract:function(t){var n=new CSG.Node(this.clone().polygons),o=new CSG.Node(t.clone().polygons);return n.invert(),n.clipTo(o),o.clipTo(n),o.invert(),o.clipTo(n),o.invert(),n.build(o.allPolygons()),n.invert(),CSG.fromPolygons(n.allPolygons())},intersect:function(t){var n=new CSG.Node(this.clone().polygons),o=new CSG.Node(t.clone().polygons);return n.invert(),o.clipTo(n),o.invert(),n.clipTo(o),o.clipTo(n),n.build(o.allPolygons()),n.invert(),CSG.fromPolygons(n.allPolygons())},inverse:function(){var t=this.clone();return t.polygons.map((function(t){t.flip()})),t}},CSG.Vector=function(t,n,o){3==arguments.length?(this.x=t,this.y=n,this.z=o):"x"in t?(this.x=t.x,this.y=t.y,this.z=t.z):(this.x=t[0],this.y=t[1],this.z=t[2])},CSG.Vector.prototype={clone:function(){return new CSG.Vector(this.x,this.y,this.z)},negated:function(){return new CSG.Vector(-this.x,-this.y,-this.z)},plus:function(t){return new CSG.Vector(this.x+t.x,this.y+t.y,this.z+t.z)},minus:function(t){return new CSG.Vector(this.x-t.x,this.y-t.y,this.z-t.z)},times:function(t){return new CSG.Vector(this.x*t,this.y*t,this.z*t)},dividedBy:function(t){return new CSG.Vector(this.x/t,this.y/t,this.z/t)},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z},lerp:function(t,n){return this.plus(t.minus(this).times(n))},length:function(){return Math.sqrt(this.dot(this))},unit:function(){return this.dividedBy(this.length())},cross:function(t){return new CSG.Vector(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}},CSG.Vertex=function(t,n,o,i){this.pos=new CSG.Vector(t),this.normal=new CSG.Vector(n),this.uv=o&&o.clone(),this.color=i&&new CSG.Vector(i)},CSG.Vertex.prototype={clone:function(){return new CSG.Vertex(this.pos.clone(),this.normal.clone(),this.uv&&this.uv.clone(),this.color&&this.color.clone())},flip:function(){this.normal=this.normal.negated()},interpolate:function(t,n){return new CSG.Vertex(this.pos.lerp(t.pos,n),this.normal.lerp(t.normal,n),this.uv&&t.uv&&this.uv.lerp(t.uv,n),this.color&&t.color&&this.color.lerp(t.color,n))}},CSG.Plane=function(t,n){this.normal=t,this.w=n},CSG.Plane.EPSILON=1e-5,CSG.Plane.fromPoints=function(t,n,o){var i=n.minus(t).cross(o.minus(t)).unit();return new CSG.Plane(i,i.dot(t))},CSG.Plane.prototype={clone:function(){return new CSG.Plane(this.normal.clone(),this.w)},flip:function(){this.normal=this.normal.negated(),this.w=-this.w},splitPolygon:function(t,n,o,i,s){for(var e=0,l=[],r=0;r<t.vertices.length;r++){var h=(S=this.normal.dot(t.vertices[r].pos)-this.w)<-CSG.Plane.EPSILON?2:S>CSG.Plane.EPSILON?1:0;e|=h,l.push(h)}switch(e){case 0:(this.normal.dot(t.plane.normal)>0?n:o).push(t);break;case 1:i.push(t);break;case 2:s.push(t);break;case 3:var c=[],u=[];for(r=0;r<t.vertices.length;r++){var p=(r+1)%t.vertices.length,a=l[r],f=l[p],y=t.vertices[r],g=t.vertices[p];if(2!=a&&c.push(y),1!=a&&u.push(2!=a?y.clone():y),3==(a|f)){var S=(this.w-this.normal.dot(y.pos))/this.normal.dot(g.pos.minus(y.pos)),v=y.interpolate(g,S);c.push(v),u.push(v.clone())}}c.length>=3&&i.push(new CSG.Polygon(c,t.shared)),u.length>=3&&s.push(new CSG.Polygon(u,t.shared))}}},CSG.Polygon=function(t,n){this.vertices=t,this.shared=n,this.plane=CSG.Plane.fromPoints(t[0].pos,t[1].pos,t[2].pos)},CSG.Polygon.prototype={clone:function(){var t=this.vertices.map((function(t){return t.clone()}));return new CSG.Polygon(t,this.shared)},flip:function(){this.vertices.reverse().map((function(t){t.flip()})),this.plane.flip()}},CSG.Node=function(t){this.plane=null,this.front=null,this.back=null,this.polygons=[],t&&this.build(t)},CSG.Node.prototype={clone:function(){var t=new CSG.Node;return t.plane=this.plane&&this.plane.clone(),t.front=this.front&&this.front.clone(),t.back=this.back&&this.back.clone(),t.polygons=this.polygons.map((function(t){return t.clone()})),t},invert:function(){for(var t=0;t<this.polygons.length;t++)this.polygons[t].flip();this.plane.flip(),this.front&&this.front.invert(),this.back&&this.back.invert();var n=this.front;this.front=this.back,this.back=n},clipPolygons:function(t){if(!this.plane)return t.slice();for(var n=[],o=[],i=0;i<t.length;i++)this.plane.splitPolygon(t[i],n,o,n,o);return this.front&&(n=this.front.clipPolygons(n)),o=this.back?this.back.clipPolygons(o):[],n.concat(o)},clipTo:function(t){this.polygons=t.clipPolygons(this.polygons),this.front&&this.front.clipTo(t),this.back&&this.back.clipTo(t)},allPolygons:function(){var t=this.polygons.slice();return this.front&&(t=t.concat(this.front.allPolygons())),this.back&&(t=t.concat(this.back.allPolygons())),t},build:function(t){if(t.length){this.plane||(this.plane=t[0].plane.clone());for(var n=[],o=[],i=0;i<t.length;i++)this.plane.splitPolygon(t[i],this.polygons,this.polygons,n,o);n.length&&(this.front||(this.front=new CSG.Node),this.front.build(n)),o.length&&(this.back||(this.back=new CSG.Node),this.back.build(o))}}};